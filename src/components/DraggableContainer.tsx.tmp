'use client';

import React, { useRef, useEffect, useState, KeyboardEvent, ChangeEvent } from 'react';
import Draggable from 'react-draggable';
import Image from 'next/image';

// Interactive Terminal Component
const InteractiveTerminal: React.FC = () => {
  const [history, setHistory] = useState<string[]>([
    'echo "Welcome to Retro Terminal!"',
    'Welcome to Retro Terminal!',
    'ls',
    'Desktop  Documents  Downloads  Music  Pictures',
  ]);
  const [input, setInput] = useState('');
  const inputRef = useRef<HTMLInputElement>(null);

  const handleTerminalClick = () => {
    inputRef.current?.focus();
  };

  const handleCommand = (cmd: string) => {
    let output = '';
    switch (cmd.trim().toLowerCase()) {
      case 'about':
        output = 'This is a retro-style terminal window.\nCreated by digitaldina.';
        break;
      case 'help':
        output = 'Available commands: about, help, clear, ls, echo';
        break;
      case 'clear':
        setHistory([]);
        return;
      case 'ls':
        output = 'Desktop  Documents  Downloads  Music  Pictures';
        break;
      default:
        if (cmd.startsWith('echo ')) {
          output = cmd.slice(5);
        } else if (cmd.trim() === '') {
          output = '';
        } else {
          output = `Command not found: ${cmd}`;
        }
    }
    setHistory((prev) => [...prev, `$ ${cmd}`, ...(output ? [output] : [])]);
  };

  const handleInput = (e: ChangeEvent<HTMLInputElement>) => {
    setInput(e.target.value);
  };

  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter') {
      handleCommand(input);
      setInput('');
    }
  };

  return (
    <div
      className="retro-terminal shadow-lg"
      style={{
        width: '100%',
        height: '100%',
        background: 'linear-gradient(180deg, #222 90%, #333 100%)',
        border: '4px solid #e7d7b1',
        borderRadius: 8,
        boxShadow: '0 0 24px #e7d7b1',
        color: '#e7d7b1',
        fontFamily: 'monospace',
        padding: 16,
        display: 'flex',
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'flex-start',
        userSelect: 'none',
        overflow: 'hidden',
        cursor: 'text',
      }}
      tabIndex={0}
      onClick={handleTerminalClick}
    >
      <div style={{ fontWeight: 'bold', marginBottom: 8, letterSpacing: 2 }}>
        <span style={{ color: '#e7d7b1' }}>┌─[retro@os]</span> <span style={{ color: '#fff' }}>─[~]</span>
      </div>
      <div style={{ flex: 1, width: '100%', overflowY: 'auto', fontSize: 16, whiteSpace: 'pre-line', marginBottom: 4 }}>
        {history.map((line, idx) => (
          <div key={idx}>{line}</div>
        ))}
      </div>
      <div style={{ display: 'flex', alignItems: 'center', width: '100%' }}>
        <span style={{ color: '#e7d7b1', marginRight: 4 }}>$</span>
        <input
          ref={inputRef}
          value={input}
          onChange={handleInput}
          onKeyDown={handleKeyDown}
          style={{
            background: 'transparent',
            border: 'none',
            outline: 'none',
            color: '#e7d7b1',
            fontFamily: 'monospace',
            fontSize: 16,
            flex: 1,
          }}
        />
      </div>
    </div>
  );
};

interface DraggableContainerProps {
  backgroundImage: string;
  containerWidth?: number | 'fullscreen';
  containerHeight?: number | 'fullscreen';
  className?: string;
}

export default function DraggableContainer({ 
  backgroundImage,
  containerWidth = 'fullscreen',
  containerHeight = 'fullscreen',
  className = ''
}: DraggableContainerProps) {
  const [dimensions, setDimensions] = useState({ width: 800, height: 600 });

  useEffect(() => {
    const updateDimensions = () => {
      const padding = 40;
      setDimensions({
        width: window.innerWidth - padding,
        height: window.innerHeight - padding
      });
    };

    updateDimensions();
    window.addEventListener('resize', updateDimensions);
    return () => window.removeEventListener('resize', updateDimensions);
  }, []);

  const actualWidth = containerWidth === 'fullscreen' ? dimensions.width : containerWidth;
  const actualHeight = containerHeight === 'fullscreen' ? dimensions.height : containerHeight;
  const helloKittyRef = useRef(null);
  const froggyMusicRef = useRef(null);
  const StickyNoteRef = useRef(null);
  const polaroidRef = useRef(null);
  const terminalRef = useRef(null);

  const getBounds = (itemWidth: number, itemHeight: number) => ({
    left: 0,
    top: 0,
    right: actualWidth - itemWidth,
    bottom: actualHeight - itemHeight,
  });

  return (
    <div 
      className={`relative ${className}`}
      style={{ width: actualWidth, height: actualHeight }}
    >
      {/* Background computer image */}
      <div className="absolute inset-0">
        <Image
          src={backgroundImage}
          alt="Computer Desktop"
          fill
          className="object-contain"
          priority
        />
      </div>
      
      {/* Draggable items inside the container */}
      <div className="absolute inset-0">
        {/* Retro Terminal Window (not draggable) */}
        <div
          ref={terminalRef}
          className="absolute retro-terminal-window"
          style={{
            zIndex: 999,
            left: '33%',
            top: '18%',
            width: '32vw',
            minWidth: 220,
            maxWidth: 420,
            height: '20vw',
            minHeight: 120,
            maxHeight: 260,
            pointerEvents: 'auto',
          }}
        >
          <InteractiveTerminal />
        </div>

        {/* Sticky Note */}
        <Draggable 
          nodeRef={StickyNoteRef}
          bounds={getBounds(80, 80)}
          defaultPosition={{ x: 150, y: 90 }}
        >
          <div ref={StickyNoteRef} className="absolute cursor-move" style={{ zIndex: 1001 }}>
            <Image
              src="/stickyNote.png"
              alt="Sticky Note"
              width={80}
              height={80}
              className="select-none drop-shadow-lg"
              draggable={false}
            />
          </div>
        </Draggable>

        {/* Hello Kitty */}
        <Draggable 
          nodeRef={helloKittyRef}
          bounds={getBounds(80, 80)}
          defaultPosition={{ x: 50, y: 50 }}
        >
          <div ref={helloKittyRef} className="absolute cursor-move" style={{ zIndex: 1001 }}>
            <Image
              src="/helloKitty.png"
              alt="Hello Kitty"
              width={80}
              height={80}
              className="select-none drop-shadow-lg"
              draggable={false}
            />
          </div>
        </Draggable>

        {/* Froggy Music */}
        <Draggable 
          nodeRef={froggyMusicRef}
          bounds={getBounds(70, 70)}
          defaultPosition={{ x: 200, y: 100 }}
        >
          <div ref={froggyMusicRef} className="absolute cursor-move" style={{ zIndex: 1001 }}>
            <Image
              src="/froggyMusic.png"
              alt="Froggy Music"
              width={70}
              height={70}
              className="select-none drop-shadow-lg"
              draggable={false}
            />
          </div>
        </Draggable>

        {/* Polaroid */}
        <Draggable 
          nodeRef={polaroidRef}
          bounds={getBounds(90, 90)}
          defaultPosition={{ x: 100, y: 250 }}
        >
          <div ref={polaroidRef} className="absolute cursor-move" style={{ zIndex: 1001 }}>
            <Image
              src="/polaroid.png"
              alt="Polaroid"
              width={90}
              height={90}
              className="select-none drop-shadow-lg"
              draggable={false}
            />
          </div>
        </Draggable>
      </div>
    </div>
  );
}
